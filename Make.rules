# Make.rules			-*- Makefile -*-
#
# Common rules for building stuff. All of the Makefiles include this
# file.
#
# $Id: Make.rules,v 1.2 2000-01-26 13:44:24 arensb Exp $

# Grab the variables generated by `configure'
include ${TOP}/Make.vars

.SUFFIXES:	.c .o .cc .ln
.SUFFIXES:	.a

.c.o:
	${CC} ${CFLAGS} -c $<

.cc.o:
	${CXX} ${CXXFLAGS} -c $<

.c.ln:
	${LINT} ${LINTARGS} -i $<

.SUFFIXES:	.dvi .info .ps .texi .html

.texi.info:
	${MAKEINFO} $<

.texi.dvi:
	${TEXI2DVI} $<

.dvi.ps:
	${DVIPS} -o $@ $<

LIBRARY =	lib${LIBNAME}.a

# List of recursive targets, i.e., those where you build the target in
# each subdirectory.
RECURSIVE_TARGETS = \
		all depend clean distclean spotless distfiles-core distfiles \
		install lint

# This empty rule is so that `make' (build the first target) and `make
# all' will do the same thing. `all' is actually built according to
# the ${RECURSIVE_TARGETS} rule.
all::

${PROG}:	${OBJS}
	${CC} ${CFLAGS} ${OBJS} -o $@ ${LDFLAGS}

${CXXPROG}:	${OBJS}
	${CXX} ${CXXFLAGS} ${OBJS} -o $@ ${LDFLAGS}

${LIBRARY}:	${LIBOBJS}
	ar cr $@ ${LIBOBJS}
	${RANLIB} $@

# lex.yy.o:	lex.yy.c
# 	${CC} ${CFLAGS} -c $<

lex.yy.c:	lexer.l y.tab.h
	${LEX} ${LEXARGS} lexer.l

# y.tab.o:	y.tab.c
# 	${CC} ${CFLAGS} -c $<

y.tab.c y.tab.h:	parser.y
	${YACC} ${YACCARGS} parser.y

# XXX - Ought to come up with a rule that'll do the Right Thing in all
# cases, whether you have C source, C++ source, or a mixture of both.
# depend::
# 	${MKDEP} ${CPPFLAGS} ${C_SRCS} ${CXX_INCLUDEDIRS} ${CXX_SRCS}

# Targets for building the distribution.
# See the comment by ${RECURSIVE_TARGETS}::.
distfiles-core::	${DISTFILES}
	@subdirs="${SUBDIRS}"; \
	for dir in "${subdirs}"; do \
		if test ! -d "${TOPDISTDIR}/${SUBDIR}/$$dir"; then \
			echo "mkdir ${TOPDISTDIR}/${SUBDIR}/$$dir"; \
			mkdir "${TOPDISTDIR}/${SUBDIR}/$$dir"; \
		fi; \
	done
	@if test -n "${DISTFILES}"; then \
		echo "cp -p ${DISTFILES} ${TOPDISTDIR}/${SUBDIR}"; \
		cp -p ${DISTFILES} ${TOPDISTDIR}/${SUBDIR}; \
	fi

distfiles::	distfiles-core ${EXTRA_DISTFILES}
	@if test -n "${EXTRA_DISTFILES}"; then \
		echo "cp -p ${EXTRA_DISTFILES} ${TOPDISTDIR}/${SUBDIR}"; \
		cp -p ${EXTRA_DISTFILES} ${TOPDISTDIR}/${SUBDIR}; \
	fi

# Common rule for building recursive targets
# The completely redundant subdirs="${SUBDIRS}" assignment is there
# because Sun's 'sh' can't parse
#	for i in ; do echo $i; done
# It complains about a syntax error.
${RECURSIVE_TARGETS}::
	@subdirs="${SUBDIRS}"; \
	for dir in $$subdirs; do \
		echo "$@: Entering directory \`${SUBDIR}/$$dir'"; \
		(cd $$dir && \
		 ${MAKE} SUBDIR="${SUBDIR}/$$dir" TOP=${TOP}/.. $@); \
		echo "$@: Leaving directory \`${SUBDIR}/$$dir'"; \
	done

# Targets for various progressive levels of cleanliness. Each one is
# cleaner than the previous. These need to go after the
# ${RECURSIVE_TARGETS} rule, because we want to clean up the lower
# directories before cleaning up the higher ones.
#
# clean:	Delete all the files added by the compilation process
#		(*.o, core, etc.)
# distclean:	Delete anything that wasn't part of the distribution
#		(clean + anything created by `configure')
# spotless:	Delete anything that can't be recreated (distclean +
#		`configure' itself, .ps files generated for the distribution
#		as a courtesy, etc.)

clean-here:
	-rm -f ${CLEAN}
clean::		clean-here

distclean-here:
	-rm -f ${CLEAN} ${DISTCLEAN}
distclean::	distclean-here

spotless-here:
	-rm -f ${CLEAN} ${DISTCLEAN} ${SPOTLESS}
spotless::	spotless-here 
