# Makefile.in
#
#	Copyright (C) 1999, Andrew Arensburger.
#	You may distribute this file under the terms of the Artistic
#	License, as specified in the README file.
#
# $Id: Makefile.in,v 1.9 1999-10-22 02:40:04 arensb Exp $

# XXX - Explicitly write .c.o , .cc.o and executable targets:
# different compilers have different default rules, and I don't want
# to deal with them.

PACKAGE =	@PACKAGE@
VERSION =	@VERSION@

srcdir =	@srcdir@
subdir =	src
top_srcdir =	@top_srcdir@
curdir =	${top_srcdir}/${subdir}
prefix =	@prefix@
exec_prefix =	@exec_prefix@
BINDIR =	@bindir@

INSTALL =	@INSTALL@
INSTALLARGS =	-c -m 555

MKDEP =		@MKDEP@

# Compatibility functions, included for systems that don't have them.
# XXX - Bleah. This probably needs to be broken up into individual
# files/symbols: $(CFMAKERAW_C), $(CFMAKERAW_O), $(CFMAKERAW_H), and
# the like.
COMPAT =	@COMPAT@
COMPATOBJS =	@COMPATOBJS@

SRCS =		coldsync.c \
		archive.c \
		backup.c \
		restore.c \
		install.c \
		config.c \
		handledb.c \
		log.c \
		conduit.c \
		GenericConduit.cc \
		${COMPAT}

OBJS =		coldsync.o \
		archive.o \
		backup.o \
		restore.o \
		install.o \
		config.o \
		handledb.o \
		log.o \
		conduit.o \
		GenericConduit.o \
		${COMPATOBJS}

HEADERS =	coldsync.h \
		archive.h \
		conduit.h \
		GenericConduit.hh

DISTDIR =	${top_srcdir}/${PACKAGE}-${VERSION}
DISTFILES =	${SRCS} ${HEADERS} \
		Makefile.in

CLEAN =		coldsync *.o *.bak *~ core *.core \
		lex.yy.o lex.yy.c y.tab.o y.tab.c y.tab.h y.output
DISTCLEAN =	Makefile .depend
SPOTLESS =

# XXX - Figure out where to put this. Also, allow for -R flag if ever
# decide to build shared libraries.
LIBPCONN =	-L${top_srcdir}/libpconn -lpconn
LIBPDB =	-L${top_srcdir}/libpdb -lpdb

# Explicitly say how things are to be compiled: the default varies
# between systems.

CC =		@CC@
CXX =		@CXX@
DEFINES =	@DEFS@
INCLUDES =	-I. -I${top_srcdir} -I${top_srcdir}/include
CPPFLAGS =	@CPPFLAGS@ ${DEFINES} ${INCLUDES}
CFLAGS =	@CFLAGS@ ${CPPFLAGS}
CXXFLAGS =	${CFLAGS}
LIBS =		@LIBS@ ${LIBPCONN} ${LIBPDB}
LDFLAGS =	@LDFLAGS@ ${LIBS}

LEX =		@LEX@
LEXARGS =	@LEXARGS@
LIBLEX =	@LEXLIB@
YACC =		@YACC@ -d
YACCARGS =	@YACCARGS@
LIBYACC =	-ly

.SUFFIXES:	.c .o .cc

.c.o:
	${CC} ${CFLAGS} -c $<

.cc.o:
	${CXX} ${CXXFLAGS} -c $<

all:	coldsync

coldsync:	${OBJS}
	${CXX} ${CXXFLAGS} ${OBJS} -o $@ ${LDFLAGS}

install:	coldsync
	${INSTALL} ${INSTALLARGS} coldsync ${BINDIR}

# XXX - 'makedepend' doesn't find C++ dependencies. Need to explicitly
# specify -I/usr/include/g++
# Actually, 'gcc -M' generates a dependency list the right way. This
# may be exploited, but the sources then need to be separated into
# C_SRCS and CXX_SRCS.

depend:
	${MKDEP} ${DEFS} ${INCLUDES} ${SRCS}

distdir:	${DISTFILES}
	if test ! -d ${DISTDIR}/${subdir}; then \
		mkdir ${DISTDIR}/${subdir}; \
	fi
	cp -p ${DISTFILES} ${DISTDIR}/${subdir}

clean::
	-rm -f ${CLEAN}
distclean:
	-rm -f ${CLEAN} ${DISTCLEAN}
spotless:
	-rm -f ${CLEAN} ${DISTCLEAN} ${SPOTLESS}

# XXX - Experimental. This will need to be folded in to the main
# program at some point.
parse:	lex.yy.o y.tab.o
	${CC} ${CFLAGS} lex.yy.o y.tab.o -o $@ ${LIBYACC} ${LIBLEX}

lex.yy.o:	lex.yy.c
	${CC} ${CFLAGS} -c $<

lex.yy.c:	lexer.l y.tab.h
	${LEX} ${LEXARGS} lexer.l

y.tab.o:	y.tab.c
	${CC} ${CFLAGS} -c $<

y.tab.c y.tab.h:	parser.y
	${YACC} ${YACCARGS} parser.y
