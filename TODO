- Error codes should probably be divided into two parts: high byte
  indicating the protocol that gave the error, and low byte giving the
  error code.
- Ideally, you should be able to use Pilot VT100 and HotSync on the
  same cradle, without having to change anything.
  More realistically, though, it'll be necessary to write a ColdSync
  daemon controller: some tool that'll allow you to turn off the
  "listen for a HotSync connection" feature, and replace it with, say,
  getty.
  OTOH, it might be possible for the daemon to listen for certain
  sequences. E.g., if it sees 0xbe, 0xef, 0xed in quick succession,
  then it's a good bet that the Palm is trying to use SLP, from which
  one can try to figure out what to do next (usually sync). Otherwise,
  wait for a <break> (or HUP?) and start 'login' on this tty, or a POP
  daemon, or whatever.
- Write a class to sync two generic databases: a database is an
  ordered list of records; if they differ, they need to be synched.
  The normal case of synching a database on the palm with one on the
  desktop is just a specific subclass. Allow subclasses to override
  retrieving, comparing, storing, the logic underlying what to copy
  where, etc.
  How do you sync two heterogenous databases (e.g., ToDo.pdb and an
  XPostitNote of things to do)?
  (A: By using an intermediate format. In this case, have a function
  that reads XPostitNotes into a PDB, and another that takes a PDB and
  stores it as XPostitNotes.)
- A lot of assertion-checking would probably be a Good Thing.
- (When ColdSync actually gets written:) Gnome and KDE support
- Fix PADP so it can dump when writing, as well as when reading.
- Modem sync
- NetSync: figure out just how it works and stuff.
- Add a type for those four-letter creator types and such.
- Something to parse version numbers, as per <System/NetMgr.h> and
  <System/SystemMgr.h>
- Add functions InitPalmLog(), AddToPalmLog(char *), WritePalmLog(),
  to make logging work more or less the way you expect.
- AddToPalmLog() should probably also use printf() syntax, for
  convenience.
- Make the *_TRACE stuff go to a separate debugging log file.
- It should be possible to sync two Palms with each other if you have
  two cradles, or over the net.
- Add identd support?
- PAM for security throughout?
- Figure out a sane source directory organization and stick to it. I'm
  not going to worry about it too much in this alpha stage, though.
- Figure out why 'coldsync/coldsync' and HotSync on the Palm don't
  always finish at the same time.
- Get dependencies working right in Makefiles, so stuff gets rebuilt
  properly.
- The sync itself should probably just consist of opening the database
  on the Palm, finding the appropriate conduit, and invoking it.
  "Appropriate conduit" defaults to either a generic sync, or backup,
  depending on whether the database exists on the desktop or not. The
  generic conduit (and possibly the backup) should probably be written
  in C++ for easy subclassing.
- Add code to check ~/.palm/backup to look for databases that aren't
  on the Palm. Not sure what to do about those, though: if the user
  deliberately deleted them, don't want them restored, but if the Palm
  had to be cold-reset, then you _do_ want them restored.
	Under what circumstances do you want to restore a database
  that exists on the desktop but not the Palm? (example: sysadmin
  setting up a default configuration for a user.) Should this be
  manual or automatic? Would it be a good idea to always check for
  extraneous databases and ask the user what to do about them?
	Best solution is probably: if database exists on desktop but
  not on Palm, move it to an 'attic' directory (like CVS). That way,
  at least it's not gone. Should also be possible to force a backup
  from the backup directory: don't try to do anything fancy, just
  restore everything as is.
	List of Palm's databases is in 'palm->dblist[]', so check the
  backup directory for files that aren't in there.
- Look into autoconf's AC_REPLACE_FUNCS for cfmakeraw() etc.
- Add robustness. Ideally, ColdSync should recover from everything
  that's recoverable.
- Need functions to begin and end pause: if the desktop pops up a
  dialog box or something, it can take an arbitrary amount of time to
  complete. During that time, 'coldsync' should send regular tickle
  packets to the Palm to keep it from timing out. These should
  probably return an error if the sync is being run in batch
  (non-interactive) mode, i.e. when there's no one there to respond to
  the dialog.
- Move the DLP time conversion functions out of pconn/util.[ch]. Then
  take the #include <coldsync/whatever> out of util.c
- Come up with a good archive file format. Presumably, this should be
  just a series of records of the form
	<type><headerlen><length><mod/del time?>
	<data>
  where <type> is the type of chunk (AppInfo block (for when it
  changes), sort block, resource or record), <length> is the length in
  bytes of the remainder of the chunk, and <data> is the record data
  itself. <mod/del time> is the time when the record was modified or
  deleted, or whatever other housecleaning stuff is necessary.
  <headerlen> is the length of the header before the data. This ought
  to help maintain compatibility with older versions.
  Probably be good to add a magic cookie and version number at the
  beginning of the file.
  This way, adding a record to the archive is as simple as appending
  it. Having the AppInfo and sort blocks give some hope of figuring
  out which category and such the record was in. Similarly, deleting a
  record from the archive doesn't affect the other records.
- Write a utility to just dump the contents of a pdb file.
- Add CTRACE() macro for debugging, like the *_TRACE() ones.
- Turn the pdb stuff into its own library.
- Config: not all printfs recognize %q (or else the types printed out
  as %q are really long longs). Should either figure out how to get
  the size of those variables ('off_t's, generally) or get rid of
  those printf() statements.
- Test with xcopilot (and real Palm) under Linux and other OSes.
- Test under Purify.
- Installing new databases: if the database to be installed already
  exists on the Palm, check the modification numbers: if the one on
  the desktop is more recent (has a higher modification number) than
  the one on the Palm, install it. Otherwise, ignore it. This way,
  sysadmin can install a standard set of databases in a central
  location, for all users, and it'll work the way you expect.
	It should also be possible to override this behavior.
- It'd be nice to import/export sets of records into external
  databases. But you can't just upload any random database. Need to
  integrate with what you've got, somehow.
- Fix backups: the first time you sync a database, there's no backup
  copy on the desktop. But if that database includes deleted records,
  they'll be marked as deleted in the backup. Presumably they should
  be deleted. Or will this fix itself the next time you do a sync?
	The Right Thing might be to have two modes: a simple backup
  just backs everything up to a directory, without any changes (also,
  it shouldn't reset the sync flags!). You can then restore from this
  directory. The other, more common mode, does a complete backup of a
  database if it doesn't exist on the desktop; then it archives the
  archived records and deletes the expunged ones.
- Directory structure:
	~/.palm/<id>/backup	Backup of what's on the Palm
	~/.palm/<id>/archive	Old archived stuff
	~/.palm/<id>/install	Stuff to install at next sync
  where <id> is the Palm's unique ID. This is fine for the Palm III,
  but what about older ones (PalmPilot et al.)? Can the viewer ID be
  used for this? How does one create one? Generate a random number and
  hope for the best?
- Add the vc-mode RCS/CVS Id headers everywhere.
- Use syslog for logging.
- Write pack()/unpack() functions a la Perl (see Kernighan and Pike,
  "The Practice of Programming," section 9.1). Use them in
  "dlp_cmd.c", to replace the blocks of
  get_ubyte()/get_uword()/get_udword() and
  put_ubyte()/put_uword()/put_udword() calls.
- For starters, define a conduit map that does an ordinary sync for
  everything. Make SlowSync() and FastSync() part of the generic
  conduit. Then add PalmOverwritesDesktop(), DesktopOverwritesPalm()
  and Backup() conduits. Put all this in a config file.
- Conduits should have pre-fetch and post-dump hooks, with C and Perl
  libraries to simplify things. This should make a number of common
  things easier to write. The pre-fetch hook reads, say, a file, and
  returns a list of records; the post-dump hook takes a list of
  records and does something to them, e.g., dump them to a file.
	This way, if you want to keep "ToDoDB" in sync with ~/TODO,
  you just need to provide a hook that'll read ~/TODO and convert it
  to a list of records; and a hook that'll take a list of records and
  write them to ~/TODO. This is easy, and allows you to use the
  generic conduit instead of having to write your own.
- The generic conduit needs a method (hook) to determine whether two
  records are identical.
- Dynamically-loaded objects: if the 'coldsync' binary has a variable
  'foo' or a function func(), how does it make these available to a
  dynamically-loaded library?
- Redo the PDB library API: should use filehandles, rather than
  filenames. That way, can attempt to open a file and see if that's
  even possible. Currently, we download a database from the Palm, try
  to write it, and only *then* find out if ~/.palm/backup isn't
  writable.
- Optimization: don't sync a database if its modification number is
  the same as the desktop copy. We already know that this database
  hasn't changed, so there's no need to open the database, send a
  "send me the next modified record" request that we know is going to
  fail, and close the database.
- Optimization: when requesting the list of databases on the Palm,
  don't bother requesting the ones in ROM, since those don't get
  synced anyway (this should be optional, though).
