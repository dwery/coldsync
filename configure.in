dnl #
dnl # $Id: configure.in,v 1.20 1999-08-23 08:41:45 arensb Exp $
dnl #

dnl # XXX - Test for MAXHOSTNAMELEN, MAXPATHLEN

dnl # XXX - Check for existence of 'tar' (gtar, tar). If "tar
dnl # --version" exits with zero status and contains the string "GNU",
dnl # then it's GNU tar, and we can use
dnl #	GZIP="--best" ${TAR} chozf ${TARBALL} ${DISTDIR}
dnl # Otherwise, fall back on that old stand-by
dnl #	tar cf ${TARBALL} ${DISTDIR}
dnl #	${COMPRESS} ${TARBALL}
dnl # So also check for 'gzip'; if it doesn't exist, fall back on
dnl # 'compress'

dnl # XXX - Check for gettext library

AC_INIT(src/PConnection.c)

EXIT_STATUS=0

PACKAGE="coldsync"
VERSION="0.4.5"

AC_DEFINE_UNQUOTED(PACKAGE,["$PACKAGE"],[Name of package])
AC_DEFINE_UNQUOTED(VERSION,["$VERSION"],[Version number of package])
if test x"$EDITION" = x ; then
	EDITION="$VERSION"
fi
AC_SUBST(PACKAGE)
AC_SUBST(VERSION)
AC_SUBST(EDITION)

# This is almost certainly a Good Thing
if test x"$prefix" = xNONE; then
	LDFLAGS="-L/usr/local/lib"
else
	LDFLAGS="-L$prefix/lib"
fi

## Checks for programs.

# Find the C compiler
AC_PROG_CC

# Find the C++ compiler
AC_PROG_CXX

# I know how to be pedantic with gcc. Other compilers, I'm not sure.
if test x"$GCC" = x"yes" ; then
		CFLAGS="$CFLAGS -Wall -ansi -pedantic"
else
	AC_MSG_RESULT(dnl
[	You don't seem to be using gcc, so various anal retentive
	compiler options won't be turned on. If you know what they
	are for your compiler, you may wish to turn them on, e.g.
		CFLAGS=\"-Wall -ansi -pedantic\" ./configure])
fi
AC_SUBST(CFLAGS)

AC_PROG_RANLIB
AC_PROG_INSTALL

# AIX sucks so bad, it requires its own special check.
AC_AIX

# Find a tool with which to build dependencies
# XXX - Fix dependencies under 'makedepend' (C++ doesn't work right)
AC_CHECK_PROGS(MKDEP,[mkdep makedepend true])

AC_CHECK_PROG(MKID, mkid, mkid, true)
AC_SUBST(MKID)

AC_CHECK_PROGS(TAR,[gtar tar])
AC_SUBST(TAR)

AC_CHECK_PROGS(GZIP,[gzip compress])
AC_SUBST(GZIP)

dnl ## Checks for libraries.

# ElectricFence (optional)
AC_ARG_WITH(efence,dnl
[  --with-efence           Use Electric Fence memory checking library
                          (only desirable for developers).],dnl
[AC_CHECK_LIB(efence,malloc)
if test "$ac_cv_lib_efence_malloc" = yes; then
echo "Setting WITH_EFENCE"
	AC_DEFINE_UNQUOTED(WITH_EFENCE)
	LIBS="$LIBS -lefence"
fi])

dnl ## Checks for header files.

dnl # XXX - I believe some OSes require <string.h>, while some 

AC_HEADER_STDC
AC_HEADER_DIRENT
CS_DIRENT_TYPE
AC_CHECK_HEADERS([\
	fcntl.h \
	strings.h \
	termios.h \
	unistd.h \
	sys/select.h \
	sys/time.h \
	sys/types.h
])

#echo "ac_cv_header_blah_h == <$ac_cv_header_blah_h>"	# <>
#echo "ac_cv_header_fcntl_h == <$ac_cv_header_fcntl_h>"	# <yes>

dnl ## Checks for typedefs, structures, and compiler characteristics.
AC_C_CONST
AC_TYPE_MODE_T
AC_TYPE_OFF_T
AC_TYPE_PID_T
AC_TYPE_SIZE_T
AC_TYPE_UID_T
AC_HEADER_TIME
dnl AC_STRUCT_TM
AC_STRUCT_TIMEZONE

dnl ## Checks for library functions.
AC_CHECK_FUNCS(getopt \
	select \
	rename \
	strncpy \
	cfmakeraw \
	strcasecmp \
	strncasecmp
)

# XXX - Under Redhat 6.0 (egcs), need to compile with -D_BSD_SOURCE
# -D_XOPEN_SOURCE to kill a lot of the warnings. How to detect this?
#
# Under gcc, can use 'gcc -Werror', which turns all warnings into
# errors.
# Even with gcc, though, this could get mighty complex mighty fast.
# Would it be better to just let the user define these symbols on the
# "configure" command line?

if test x"$GCC" = xyes; then
	echo 1>&6 "	These next few tests try to figure out how to make your
	compiler compile without warnings. Even if they fail, you
	should still be able to compile."

	OLDCFLAGS="$CFLAGS"		# Save old value of CFLAGS
	CFLAGS="-Werror $CFLAGS"	# Warnings are now errors

	# XXX - Check whether __EXTENSIONS__ helps

	# Check whether getopt() requires _XOPEN_SOURCE (needed under
	# Redhat 6.0)
	AC_CACHE_CHECK([whether getopt() wants _XOPEN_SOURCE],cs_cv_anal_xopen_source,
	AC_TRY_COMPILE([#include <unistd.h>],[char *foo = optarg; foo++],
	cs_cv_anal_xopen_source="no",
	AC_TRY_COMPILE([#define _XOPEN_SOURCE
#include <unistd.h>],[char *foo = optarg; foo++],
	cs_cv_anal_xopen_source="yes",
	AC_MSG_WARN([I don't know how to satisfy your compiler!]))))

	# Check whether strncasecmp() requires _BSD_SOURCE (needed
	# under Redhat 6.0)
	# XXX - Check whether strncasecmp() exists?
	# XXX - Check whether to use <string.h> or <strings.h> ?
	AC_CACHE_CHECK([whether strncasecmp() wants _BSD_SOURCE],cs_cv_anal_bsd_source,
	AC_TRY_COMPILE([#include <string.h>],[int foo;
	foo = strncasecmp("foo","bar",3)],
	cs_cv_anal_bsd_source="no",
	AC_TRY_COMPILE([#define _BSD_SOURCE
#include <string.h>],[int foo;
	foo = strncasecmp("foo","bar",3)],
	cs_cv_anal_bsd_source="yes",
	AC_MSG_WARN([I don't know how to satisfy your compiler!]))))

	CFLAGS="$OLDCFLAGS"		# Restore old value of CFLAGS
fi
if test x"$cs_cv_anal_xopen_source" = xyes; then
	AC_DEFINE_UNQUOTED(WANT_XOPEN_SOURCE)
fi
if test x"$cs_cv_anal_bsd_source" = xyes; then
	AC_DEFINE_UNQUOTED(WANT_BSD_SOURCE)
fi

# Tell the various Makefiles to use the compatibility function provided
if test -z "$ac_cv_func_cfmakeraw" -o x"$ac_cv_func_cfmakeraw" = xno ; then
	COMPAT="$COMPAT cfmakeraw.c"
	COMPATOBJS="$COMPATOBJS cfmakeraw.o"
fi

AC_SUBST(COMPAT)
AC_SUBST(COMPATOBJS)

# Print error messages for various required bits that couldn't be found.
if test -z "$ac_cv_func_getopt" -o x"$ac_cv_func_getopt" = x"no" ; then
	AC_MSG_WARN([
	The getopt() function not be found. This package
	may not compile properly])
	EXIT_STATUS=1
fi

if test -z "$ac_cv_func_select" -o x"$ac_cv_func_select" = x"no" ; then
	AC_MSG_WARN([
	The select() function not be found. This package
	may not compile properly])
	EXIT_STATUS=1
fi

AC_CONFIG_HEADER(config.h)
AC_OUTPUT([Makefile
	src/Makefile
	doc/Makefile
	doc/version.texi])
AC_MSG_RESULT(dnl
[
	Don't forget to run \"make depend\"
])
exit "$EXIT_STATUS"
