dnl #
dnl # $Id: configure.in,v 1.15 1999-07-04 02:03:24 arensb Exp $
dnl #

dnl # XXX - 'make clean' doesn't work with Berkeley 'make': the
dnl # culprit is a couple of lines in the generated Makefile that say
dnl #	test "$var1" = value && var2=true
dnl # Berkeley 'make' copes quite well with the equivalent
dnl #	if test "$var1" = value; then var2=true; fi

dnl # XXX - Test to see whether cpp accepts macro definitions with
dnl # "..." as argument.

dnl # XXX - Test for MAXHOSTNAMELEN, MAXPATHLEN
dnl # XXX - See if printf() and friends accept %q format.
dnl # XXX - Under Solaris 2.5, gcc fusses if you print a 'uid_t' with
dnl # %ld. Figure out how to set this properly.

AC_INIT(pconn/PConnection.c)
AM_INIT_AUTOMAKE(coldsync, 0.3.2)
AM_CONFIG_HEADER(config.h)

dnl # Checks for programs.

dnl # Find the Bourne shell and substitute it in Makefile, to make
dnl # 'gmake' happy.
AC_PATH_PROG(SHELL,[sh bash])

dnl # Find the C compiler
AC_PROG_CC

dnl # Find the C++ compiler
AC_PROG_CXX

# I know how to be pedantic with gcc. Other compilers, I'm not sure.
if test x"$GCC" = x"yes" ; then
	if test x"$CPPFLAGS" = x ; then
		CPPFLAGS="-g -Wall -ansi -pedantic"
	else
		AC_MSG_RESULT(dnl
[	At this point, I would have turned on the following gcc options:
		-g -Wall -ansi -pedantic
	but since you've specified a CPPFLAGS variable, I'll go with
	what you said, instead:
		$CPPFLAGS])

	fi
else
	AC_MSG_RESULT(dnl
[	You don't seem to be using gcc, so various anal retentive
	compiler options won't be turned on. If you know what they
	are for your compiler, you may wish to turn them on, e.g.
		CFLAGS=\"-Wall -ansi -pedantic\" ./configure])
fi
AC_SUBST(CPPFLAGS)

AC_PROG_RANLIB

dnl # Checks for libraries.

dnl # Checks for header files.
AC_HEADER_STDC
AC_CHECK_HEADERS(fcntl.h sys/time.h unistd.h)

dnl # Checks for typedefs, structures, and compiler characteristics.
AC_C_CONST
AC_HEADER_TIME
AC_STRUCT_TIMEZONE

dnl # XXX - How do you find out how big an 'off_t' is?
dnl AC_CHECK_SIZEOF(off_t)

dnl # Checks for library functions.
AC_CHECK_FUNCS(select \
	cfmakeraw \
	snprintf)

# XXX - Under RedHat, if you compile with "gcc -ansi", it complains
# about "implicit declaration of cfmakeraw()". You can fix this with
# "-D_BSD_SOURCE", but is there a better way of turning this on?
# Ditto for mkstemp()
# XXX - Under RedHat 5.2 Linux, mkstemp() requires <stdlib.h>,
# although the man page just says <unistd.h>

# Tell the various Makefiles to use the compatibility function provided
if test x"$ac_cv_func_cfmakeraw" = xno ; then
	COMPAT="$COMPAT cfmakeraw.c"
fi

AC_SUBST(COMPAT)

dnl # Should print out an error if one or more required components
dnl # couldn't be found. Use AC_MSG_WARN([message])

#if test x"$ac_cv_header_sys_frobozz_h" = x"no" ; then
#	AC_MSG_WARN([<frobozz.h> could not be found. This package may not
#	compile properly])
#fi

AC_OUTPUT([Makefile
	palm/Makefile
	pconn/Makefile
	coldsync/Makefile
	doc/Makefile])
